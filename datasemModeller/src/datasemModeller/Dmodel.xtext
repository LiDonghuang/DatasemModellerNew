grammar datasemModeller.Dmodel with org.eclipse.xtext.common.Terminals
generate dmodel "http://www.Dmodel.datasemModeller"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ModelBuilder:
	'ModelBuilder' name=ID
	UserLibraries=UserLibraries
	ExperimentModel=ExperimentModel			
;

UserLibraries:
'UserLibraries' 

	'ServiceProviderTypes' 
	(ServiceProviderTypes += ServiceProviderType)+		
	'end ServiceProviderTypes'
	
	'WorkItemTypes' (WorkItemTypes += WorkItemType)+
	'end WorkItemTypes'	
		
	'Services' 
	Services += Service+
	'end Services'
	
	'GovernanceStrategies' 
    (GovernanceStrategies += GovernanceStrategy)*
    'end GovernanceStrategies'  
      
'end UserLibraries'
;	

ExperimentModel:
	'ExperimentModel' name=ID
	
	"Variables" 
	(ExperimentVariables+=ExperimentVariable)*
	"end Variables"
	
	'OrganizationalModel'			
		'ServiceProviders'
		(ServiceProviders += ServiceProvider)+
		'end ServiceProviders'
	'end OrganizationalModel'	
	
	'WorkItemNetworkModel'			
	    'WorkItemNetworks'
		(WorkItemNetworks += WorkItemNetwork)+
		'end WorkItemNetworks'
	'end WorkItemNetworkModel'
	
	'ExperimentSettings'
		'WINReplications' 
		(WINReplications+=WINReplication)+
		'end WINReplications'
		'ExperimentParameters'
		ExperimentParameters = Mechanism
		'end ExperimentParameters'
	'end ExperimentSettings'
	
'end ExperimentModel'
;

// ------------------------ Basic Objects ---------------------------------	
terminal DOUBLE returns ecore::EDouble:
	('0'..'9')+('.' ('0'..'9')+)
;
terminal BOOLEAN returns ecore::EBoolean:
	'false'|'true'
;
Number:
	INT|DOUBLE
;
Parameter:
	Number|STRING|ID|BOOLEAN
;
AbstractParameter:
	(isVariable?="var:" variable=[ExperimentVariable])|(value=Parameter)
;
NumExpression:		
	(numValue=Number)|	
	(distribution ?= 'Random.' numDist = Distribution)
;
Distribution:
	(isNormal?="Normal"|isUniform?="Uniform"|isExponential?="Exponential")
	'['(parameters+=Parameter)(','parameters+=Parameter)*']'
;
// ------------------------ Governance Objects ---------------------------------
GovernanceStrategy: 
	name = ID 
	("type"":"
	((pull?="pull" "{"pullStrategy=PullStrategy"}")|(push?="push" "{"pushStrategy=PushStrategy"}"))
	)
	|
	("{"pushStrategy=PushStrategy"}")
;
PullStrategy:	
	'mechanisms' '{'(mechanisms += Mechanism)+ '}'
;
PushStrategy:	
	'mechanisms' '{'(mechanisms += Mechanism)+ '}'
;
Mechanism:
	name=ID'='value=Parameter		
	('{'
		( (attributes+=MechanismAttribute)(','attributes+=MechanismAttribute)* )?
	'}')?	
;	
MechanismAttribute:
	name=ID'='value=Parameter
;
// ------------------------ WorkItem Objects ---------------------------------
WorkItemType:		
	name=ID '{'
	('hierarchy''='hierarchy=INT)?
	(Mechanisms+=Mechanism)*
	'}'
	(id=INT)?
;
WorkItemNetwork:
	'WorkItemNetwork' name=ID '{'
	'WorkItems' '{' (workItems+=WorkItem)+ '}'
	'}'
	(id=INT)?
;
WorkItem:		
	name=ID ("type"":" type=[WorkItemType])?'{'
	(hasPredecessors?='prerequisites''{'(pTasks+=[WorkItem])(','pTasks+=[WorkItem])*'}')?
	(
	(hasSubtasks?='decomposesTo''{'(sTasks+=[WorkItem])(','sTasks+=[WorkItem])* '}'
	('analysisPhases''{'(requiredAnalysis+=RequiredService)(','requiredAnalysis+=RequiredService)*'}')?)?
	|
	(
	('analysisPhases''{'(requiredAnalysis+=RequiredService)(','requiredAnalysis+=RequiredService)*'}'
	)?
	'efforts' '{'(requiredServices+=RequiredService)(','requiredServices+=RequiredService)*'}')
	)		
	(hasImpacts?='impacts' '{'(impacts+=Impact)(','impacts+=Impact)*'}')?
	
	('value''=' value=NumExpression)?
	('arrival''=' arrivalTime=INT)?
	('duration''=' duration=INT)?
	'}'
	(id=INT)?
;
RequiredService:
	"["serviceType=[Service]"," efforts=AbstractParameter"]"
;
Impact:
	impactWI=[WorkItem]'['likelihood=AbstractParameter','risk=AbstractParameter']'
;

// ------------------------ Organizational Objects ---------------------------------
ServiceProviderType:
	(id=INT)?
	name=ID '{'
	('hierarchy''='hierarchy=INT)?
	'}'
;
Service:
	name=ID ('{'
	('hierarchy' '='hierarchy=INT)?
	'}')?	
	(id=INT)?	
;		
ServiceProvider:
	name=ID ("type"":" type=[ServiceProviderType])? '{'
	('assignTo' '{' (assignTo+=[ServiceProvider])(','assignTo+=[ServiceProvider])* '}')?		
	('strategy'":" governanceStrategy=[GovernanceStrategy])?
	("{"(strategySpecs+=MechanismAttribute)(','strategySpecs+=MechanismAttribute)*"}")?
    ('resources'':' resources+=Asset+)?
    '}'
    (id=INT)?
;	
Asset: 
	name=ID '*'number=AbstractParameter '{'
	('skills'':'  (skillSet+=Skill)(','skillSet+=Skill)*)?
	'}'
	(id=INT)?
;	
Skill:
	'['service=[Service]','efficiency=AbstractParameter']' 
;		
// ------------------------ Experiment Objects ---------------------------------
ExperimentVariable:
	name=ID ":"
	(
	(boolean?="boolean"booleanValue=BOOLEAN)|
	(num?=("num")numValue=Number)|
	(distribution ?= 'Random.'numDist=Distribution)|
	(string?="string"stringValue=STRING)|
	(strategy?="GovernanceStrategy"strategyValue=GovernanceStrategy)
	)
;
WINReplication:
	'create'workItemNetwork=[WorkItemNetwork]
	'*' numReplications=INT 'at'assignTo=[ServiceProvider]
	(',''interArrival''='interarrival=AbstractParameter)?
;	