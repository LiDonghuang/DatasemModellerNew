grammar datasem.xtext.kanban.domainmodel.Kanbanmodel with org.eclipse.xtext.common.Terminals

generate kanbanmodel "http://www.xtext.datasem/kanban/domainmodel/Kanbanmodel"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

	ModelBuilder:
		'ModelBuilder' name=ID
		'Description' Description=STRING
		SystemLibraries=SystemLibraries
		UserLibraries=UserLibraries
		ExperimentModel=ExperimentModel
	;


	ExperimentModel:
		'ExperimentModel' name=ID
		('Path' Path = QualifiedName)?	
		"Variables" (Variables+=Variable)*
		"end Variables"
		'OrganizationalModel'			
			'ServiceProviders'
			(ServiceProviders += ServiceProvider)+
			'end ServiceProviders'
		'end OrganizationalModel'	
		'WorkItemNetworkModel'			
			'WorkSources'
		    (WorkSources += WorkSource)+
		    'end WorkSources'
		    'WorkItemNetworks'
			(WorkItemNetworks += WorkItemNetwork)+
			'end WorkItemNetworks'
	//		(kssWorkFlow=KanbanTaskModel)
		'end WorkItemNetworkModel'
		'ExperimentSettings'
			'WINReplications' (WINReplications+=WINReplication)+
			'end WINReplications'
			'Indicators' (Indicators+=ID)*
			'end Indicators'			
		'end ExperimentSettings'
	'end ExperimentModel';
			
	SystemLibraries:		
	'SystemLibraries' 
		'EventTypes' 
		(EventTypes += EventType)+
		'end EventTypes'
		'ConditionTypes' 
		(ConditionTypes += ConditionType)+
		'end ConditionTypes'
		'TransitionTypes' 
		(TransitionTypes += TransitionType)+
		'end TransitionTypes'
		'GovernanceLibrary' 
			'WIAcceptanceRuleTypes' '{'
			(WIAcceptanceRuleTypes += WIAcceptanceRuleType)+
			'}'
			'WISelectionRuleTypes' '{'
			(WISelectionRuleTypes += WISelectionRuleType)+
			'}'
			'WIAssignmentRuleTypes' '{'
			(WIAssignmentRuleTypes += WIAssignmentRuleType)+
			'}'
			'ResourceAllocationRuleTypes' '{'
			(ResourceAllocationRuleTypes += ResourceAllocationRuleType)+
			'}'
			'ResourceOutsourcingRuleTypes' '{'
			(ResourceOutsourcingRuleTypes += ResourceOutsourcingRuleType)+
			'}'	
		'end GovernanceLibrary'
		'TaskLibrary'
			'ProcessModels'
			(ProcessModels += ProcessModel)+
			'end ProcessModels'		    			
			'ValueFunctions'
			(ValueFunctions += ValueFunction)+
			'end ValueFunctions'			
		'end TaskLibrary'
	'end SystemLibraries';
		
	UserLibraries:
	'UserLibraries' 
		'WorkItemTypes' 
		(WorkItemTypes += WorkItemType)+		
		'end WorkItemTypes'
		'ClassOfServices' 
		(ClassOfServices += ClassOfService)+
		'end ClassOfServices'
		'Services' 
		(Services += Service)+
		'end Services'
		'GovernanceStrategies' 
	    (GovernanceStrategies += GovernanceStrategy)+
	    'end GovernanceStrategies'
//		    ('Repositories' '{'
//			(Repositories += Repository)+
//			'}')?	    
	'end UserLibraries';
		

	
	//
//	terminal PROFILE :
//   ((CHAR|DIGIT)(CHAR|DIGIT)'.'(CHAR|DIGIT)(CHAR|DIGIT))
//	;
//	terminal DIGIT:
//	    ('0'..'9')
//	;
//	terminal CHAR returns ecore::EString : 
//	    ('a'..'z'|'A'..'Z')
//	;
	terminal DOUBLE returns ecore::EDouble:
		('0'..'9')+('.' ('0'..'9')+)
	;
	//
	QualifiedName:
		ID ('.' ID)*('.' INT)*
	;
	Parameter:
		INT|DOUBLE|STRING|ID	
	;
	AbstractParameter:
		(isVariable?="Variable:" variable=[Variable])|(value=Parameter)
	;
	NumExpression:		
		(numValue=DOUBLE)|	
		(distribution ?= 'Random.' numDist = Distribution)
	;
	Operator:
		(equalTo?='==')|(largerThan?='>')|(smallerThan?='<')|(largerOrEqualTo?='>=')|(smallerOrEqualTo?='<=')|(notEqualTo?='!=')
	;
	Variable:
		"Variable" name=ID '{'
		(
		(typeInteger?="INT:"intValue=INT)|
		(typeDouble?="DOUBLE:"doubleValue=DOUBLE)|
		(typeString?="STRING:"stringValue=STRING)|
		(typeDistribution?="Distribution:"distrbution=Distribution)|
		(typeStrategy?="Strategy:"strategy=[GovernanceStrategy])
		)
		'}'
	;	
	Distribution:
		(isNormal?="Normal"|isUniform?="Uniform"|isExponential?="Exponential")
		'['(parameters+=AbstractParameter)*']'
	;
	EventType:
		'EventType' name = ID
		(description=STRING)?
	;
	ConditionType:
		'ConditionType' name = ID
		(description=STRING)?
	;
	TransitionType:
		'TransitionType' name = ID
		(description=STRING)?
	;
	ProcessModel:
		'ProcessModel' name=ID '{'
		('Description' description=STRING)?
		"Events" "{"(events+=Event)+"}"
		'}'
	;
	Event:
		"Event" "{"
		"Conditions" "{"(conditions+=Condition)+"}"
		"Transitions" "{"(transitions+=Transition)+"}"
		"}"
	;
	Condition:
		type=[ConditionType] operator=Operator value=Parameter
	;
	Transition:
		type=[TransitionType]"="value=Parameter
	;
	AgentRoleType:
		'AgentRoleType' name = ID
		(description=STRING)?
	;
	
	// ------------------------ Experiment Objects ---------------------------------

	WINReplication:
		'WorkItemNetwork' workItemNetwork=[WorkItemNetwork]
		'NumReplications' numReplications=INT
	;	
	// ------------------------ Governance Objects ---------------------------------
	GovernanceStrategy: 
		(id=INT)?
		'GovernanceStrategy' name=ID '{'
		('Description' description=STRING)?
		(
		   	WIAcceptanceRule=WIAcceptance
		    WISelectionRule=WISelection 
		    WIAssignmentRule=WIAssignment 
		    ResourceAllocationRule=ResourceAllocation 
		    ResourceOutsourcingRule=ResourceOutsourcing
	    )?
	    'Mechanisms' '{'(Mechanisms += Mechanism)+ '}'
	    'Processes' '{'(Processes += Process)+ '}'
	    '}'
	;
	WIAcceptance:
		'WIAcceptance' type=[WIAcceptanceRuleType] '{'
		('Description' description=STRING)?		
		('BackLogLimit' backlogQLimit=INT)?
		('WIPLimit' readyQLimit=INT)?
		'}'
	;
	WISelection:
		'WISelection' type=[WISelectionRuleType] '{'
		('Description' description=STRING)?		
		'}'
	;
	WIAssignment:
		'WIAssignment' type=[WIAssignmentRuleType] '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceAllocation:
		'ResourceAllocation' type=[ResourceAllocationRuleType] '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceOutsourcing:
		'ResourceOutsourcing' type=[ResourceOutsourcingRuleType] '{'
		('Description' description=STRING)?
		'}'
	;
	WIAcceptanceRuleType:
		'RuleType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	WISelectionRuleType:
		'RuleType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	WIAssignmentRuleType:
		'RuleType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceAllocationRuleType:
		'RuleType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceOutsourcingRuleType:
		'RuleType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	Mechanism:
		'Mechanism' name=ID'='value=Parameter
		'{'
		('Description' description=STRING)?
		('Attributes' '{' (attributes+=MechanismAttribute)+ '}')?
		'}'
	;	
	MechanismAttribute:
		attribute=STRING'='value=Parameter
	;
	Process:
		'Process' name=ID'='value=Parameter
		'{'
		('Description' description=STRING)?
		('Attributes' '{' (attributes+=ProcessAttribute)+ '}')?
		'}'
	;	
	ProcessAttribute:
		attribute=STRING'='value=Parameter
	;	
    // ------------------------ WorkItem Objects ---------------------------------
    WorkSource:
    	(id=INT)?
    	'WorkSource' name=ID '{'
    	('Description' description=STRING)?
    	('AssignTo' '{' (assignTo+=[ServiceProvider])+ '}')?
    	(assignmentRule=WIAssignment)?
    	'}'
    ;
	WorkItemNetwork:
		(id=INT)?
    	'WorkItemNetwork' name=ID '{'
    	('Description' description=STRING)?
    	'WorkItems' '{' (workItems+=WorkItem)+ '}'
    	'}'
    ;    
	WorkItem:
		(id=INT)?
		'WorkItem' name=ID '{'
//		('Profile' profile=[WorkItemProfile])?
		('Description' description=STRING)?	
		'Type' type=[WorkItemType]
		(hasPredecessors?='Predecessors' '{' (pTasks+=[WorkItem])+ '}')?
		(isAggregationNode?='Subtasks' '{' (sTasks+=[WorkItem])+ '}')?
		('CausalTriggers'(causalTriggers+=CausalTrigger)*)?
		'RequiredServices' '{'(requiredServices+=[Service])+'}'
		('Efforts' efforts=NumExpression)?
		('MaturityLevels' maturityLevels=AbstractParameter)?
		('Uncertainty' uncertainty=AbstractParameter)?
		('Risk' risk=AbstractParameter)?
		(hasImpacts?='Impacts' '{'(impacts+=Impact)+'}')?
		('Value' value=NumExpression)?
		('ClassOfService' classOfService=[ClassOfService])?
		('WorkSource' workSource=[WorkSource])?
		('ArrivalTime' arrivalTime=INT)?
		('DueDate' dueDate=INT)?
		'}'
	;
	Impact:
		('Impact')'{'(impactWIs+=[WorkItem])+'}'
		'['likelihood=AbstractParameter impact=AbstractParameter']'
	;
	CausalTrigger:
		('=>'| '->')'{'(triggered+=[WorkItem])+'}'
		('AtProgress' atProgress=DOUBLE)?
		('OnProbability' onProbability=DOUBLE)?		
	;
	WorkItemType:
		(id=INT)?
		'WorkItemType' name=ID '{'
		('Description' description=STRING)?
		('Hierarchy' hierarchy=INT)?
		'}'
	;	
	ValueFunction:
		'ValueFunction' name=ID '{'
		('Description' description=STRING)?
		'}'
	;	

	ClassOfService:
		(id=INT)?
		'ClassOfService' name=ID '{'
		('Description' description=STRING)? 	
		"Disruptive:"((disruptive?="TRUE")|"FALSE")
		'}'
	;	
	// ------------------------ Organizational Objects ---------------------------------
	Service:
		(id=INT)?
		'Service' name=ID ('{'
		('Description' description=STRING)?
		'}')?
	;		
	ServiceProvider:
		(id=INT)?
		('ServiceProvider'|'Group') name=ID '{'
		('Description' description=STRING)?		
		('AssignTo' '{' (assignTo+=[ServiceProvider])+ '}')?
		('OutsourceFrom' '{' (outsourceFrom+=[ServiceProvider])+ '}')?		
		'TeamService'teamService=[Service]		
		('GovernanceStrategy' '{'governanceStrategy=[GovernanceStrategy]'}')?
	    ('Resources' '{' (resources+=Asset)+ '}')?
	    '}'
	;
	Asset: 
		(id=INT)?
		'Resource' name=ID '{'
		('Description' description=STRING)?
		('Number' number=AbstractParameter)
		('SkillSet' '{' (skillSet+=Skill)+ '}')?
		'}'
	;	
	Skill:
		'Service' service=[Service]
		'Efficiency' efficiency=NumExpression
	;		
	
	// ------------------------ WorkItem Repositories ---------------------------------------
//	Repository:
//		'Repository' type = [WorkItemType]
//		'Profiles' '{'(profiles += WorkItemProfile)* '}'
//		'end Repository'
//	;
//	WorkItemProfile:
//		'WorkItem' name=ID '{'
//		('Description' description=STRING)?
//		('ProcessModel' processModel=[ProcessModel])?
//		('References''{' (references+=WorkReference)+ '}')?
//		('Decompositions' '{' (decompositions+=WorkDecomposition)+ '}')?
//		('RequiredServices' (requiredServices+=[Service])+)?
//		('Efforts' efforts=NumExpression)?
//		('Value' value=NumExpression)?
//		('ClassOfService' classOfService=[ClassOfService])?
//		(allowAssignment ?= 'AssignmentAllowed')?
//		(allowDiscard ?= 'DiscardAllowed')?
//		'}'
//	;
//	WorkReference:
//		'WorkItem' workItem = [WorkItemProfile]
//		'Quantity' quantity = NumExpression
//	;
//	WorkDecomposition:
//		'WorkItem' workItem = [WorkItemProfile]
//		'Quantity' quantity = NumExpression
//	;
//	WorkPrecedency:
//		'WorkItem' workItem = [WorkItemProfile]
//	;
//	WorkCausality:
//		'WorkItem' workItem = [WorkItemProfile]
//	;	
	// ------------------------ (Reserved Objects) ---------------------------------
//	KanbanTaskModel:
//		'WorkFlow' name=ID
//		(caps+=Capability)+
//		'end WorkFlow'
//	;
//
//	Capability:
//		'capability' name=ID '{'
//		('Description' description=STRING)?
//		(reqs+=Requirement)+ 	
//		'}'
//	;
//	Requirement:
//		'requirement' name=ID '{' 
//		 ('Description' description=STRING)?
//		 ('workItems' '{' (rTasks+=[WorkItem])+ '}') 
//		 ('workItemNetwork' (dependencies += CausalTrigger)*)?
//		'}'
//	;
//	
//	Entity:
//		'entity' name=ID '{'
//		('ServiceDirectory' sdname=ID '=' '['(serviceProvisions+=Provision)* ']')?
//		(entityBehavior=Statemachine)
//		'}'
//	;
//	
//	Provision:
//		'(' serviceName=[Service] ',' '{'(providers+=[ServiceProvider])* '}'')' 
//	;
//	
//	
//	Statemachine :
//     {Statemachine}
//	('events' 
//		events+=Event+ 
//	'end')?
//	('activities' 
//		commands+=Command+ 
//	'end')?
//	(states+=State)*
//;
//
//	Event:
//		name=ID code=ID
//	;
//	
//	Command:
//		name=ID code=ID
//	;
//	
//	State:
//		'state' name=ID
//			('actions' '{' actions+=[Command]+ '}')?
//			(transitions+=Transition)*
//		'end'
//	;
//
//	Transition:
//		(event=[Event] '=>' state=[State]) | (event=[Event] '/' '[' (eventactions+=[Command])+ ']' '=>' state=[State])
//	;
	
