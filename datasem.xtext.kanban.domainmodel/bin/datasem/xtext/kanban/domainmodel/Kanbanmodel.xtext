grammar datasem.xtext.kanban.domainmodel.Kanbanmodel with org.eclipse.xtext.common.Terminals

generate kanbanmodel "http://www.xtext.datasem/kanban/domainmodel/Kanbanmodel"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

	ModelBuilder:
		'ModelBuilder' name=ID
		'desc' Description=STRING
		UserLibraries=UserLibraries
//		SystemLibraries=SystemLibraries			
		ExperimentModel=ExperimentModel			
//		(contractNetProtocols+=ContractNetProtocol)*	
//		(processModels+=ProcessModel)*
	;


	ExperimentModel:
		'ExperimentModel' name=ID
		('Path' Path = QualifiedName)?	
		"Variables" (ExperimentVariables+=ExperimentVariable)*
		"end Variables"
		'OrganizationalModel'			
			'ServiceProviders'
			(ServiceProviders += ServiceProvider)+
			'end ServiceProviders'
		'end OrganizationalModel'	
		'WorkItemNetworkModel'			
			'WorkSources'
		    (WorkSources += WorkSource)+
		    'end WorkSources'
		    'WorkItemNetworks'
			(WorkItemNetworks += WorkItemNetwork)+
			'end WorkItemNetworks'
	//		(kssWorkFlow=KanbanTaskModel)
		'end WorkItemNetworkModel'
		'ExperimentSettings'
			'WINReplications' (WINReplications+=WINReplication)+
			'end WINReplications'
			'Indicators' (Indicators+=ID)*
			'end Indicators'			
		'end ExperimentSettings'
	'end ExperimentModel';
			
//	SystemLibraries:		
//	'SystemLibraries' 
//		'EventTypes' 
//		(EventTypes += EventType)+
//		'end EventTypes'
//		'ConditionTypes' 
//		(ConditionTypes += ConditionType)+
//		'end ConditionTypes'
//		'TransitionTypes' 
//		(TransitionTypes += TransitionType)+
//		'end TransitionTypes'
//		'GovernanceLibrary' 
//			'WIAcceptanceRuleTypes' '{'
//			(WIAcceptanceRuleTypes += WIAcceptanceRuleType)+
//			'}'
//			'WISelectionRuleTypes' '{'
//			(WISelectionRuleTypes += WISelectionRuleType)+
//			'}'
//			'WIAssignmentRuleTypes' '{'
//			(WIAssignmentRuleTypes += WIAssignmentRuleType)+
//			'}'
//			'ResourceAllocationRuleTypes' '{'
//			(ResourceAllocationRuleTypes += ResourceAllocationRuleType)+
//			'}'
//			'ResourceOutsourcingRuleTypes' '{'
//			(ResourceOutsourcingRuleTypes += ResourceOutsourcingRuleType)+
//			'}'	
//		'end GovernanceLibrary'
//		'TaskLibrary'
//			'ProcessModels'
//			(ProcessModels += ProcessModel)+
//			'end ProcessModels'		    			
//			'ValueFunctions'
//			(ValueFunctions += ValueFunction)+
//			'end ValueFunctions'			
//		'end TaskLibrary'
//	'end SystemLibraries';
		
	UserLibraries:
	'UserLibraries' 
		'ServiceProviderTypes' 
		(ServiceProviderTypes += ServiceProviderType)+		
		'end ServiceProviderTypes'
		'WorkItemTypes' 
		(WorkItemTypes += WorkItemType)+	
		'end WorkItemTypes'
		'ProcessModels'
		(ProcessModels += ProcessModel)*
		'end ProcessModels'
		'ClassOfServices' 
		(ClassOfServices += ClassOfService)*
		'end ClassOfServices'
		'Services' 
		(Services += Service)*
		'end Services'
		'GovernanceStrategies' 
	    (GovernanceStrategies += GovernanceStrategy)*
	    'end GovernanceStrategies'    
	'end UserLibraries';
		
	terminal DOUBLE returns ecore::EDouble:
		('0'..'9')+('.' ('0'..'9')+)
	;
	terminal BOOLEAN returns ecore::EBoolean:
		'false'|'true'
	;
	//
	Number:
		INT|DOUBLE
	;
	QualifiedName:
		ID ('.' ID)*('.' INT)*
	;
	Parameter:
		Number|STRING|ID|BOOLEAN
	;
	AbstractParameter:
		(isVariable?="Variable:" variable=[ExperimentVariable])|(value=Parameter)
	;
	NumExpression:		
		(numValue=Number)|	
		(distribution ?= 'Random.' numDist = Distribution)
	;
	Operator:
		(equalTo?='==')|(largerThan?='>')|(smallerThan?='<')
		|(largerOrEqualTo?='>=')|(smallerOrEqualTo?='<=')|(notEqualTo?='!=')
	;
	ExperimentVariable:
		"Variable" name=ID '{'
		(
		(typeInteger?="INT:"intValue=INT)|
		(typeDouble?="DOUBLE:"doubleValue=DOUBLE)|
		(typeString?="STRING:"stringValue=STRING)|
		(typeDistribution?="Distribution:"distrbution=Distribution)|
		(typeStrategy?="Strategy:"strategy=[GovernanceStrategy])
		)
		'}'
	;	
	Distribution:
		(isNormal?="Normal"|isUniform?="Uniform"|isExponential?="Exponential")
		'['(parameters+=AbstractParameter)(','parameters+=AbstractParameter)*']'
	;
	
	// ------------------------ Experiment Objects ---------------------------------

	WINReplication:
		'WorkItemNetwork' workItemNetwork=[WorkItemNetwork]
		'NumReplications' numReplications=INT
	;	
	// ------------------------ Governance Objects ---------------------------------
	GovernanceStrategy: 
		"GovernanceStrategy" name = ID 
		"type:" (
		(pull?="Pull" "{"pullStrategy=PullStrategy)|
		(push?="Push""{"pushStrategy=PushStrategy)|
		(cnp?="CNP""{"contractNetProtocal=ContractNetProtocol)		
		)
		"}"	
	;
	ContractNetProtocol:
		('desc' description=STRING)?
		(variables+=Variable)*
		'roleBehaviors' '{'(roleBehaviors += RoleBehavior)* '}'
		'processes' '{'(Processes += [ProcessModel])+ '}'		
	;
	RoleBehavior: 	
	 	"role" name=ID "{"
	 	'actions''{'(actions+=Action)*'}'
		(states += State)+
		"}"
	;
	ProcessModel: 	
	 	name=ID "{"
	 	'actions''{'(actions+=Action)*'}'
		(states += State)+
		"}"
	;
	PullStrategy:	
		('desc' description=STRING)?	
		'mechanisms' '{'(Mechanisms += Mechanism)+ '}'
		'processes' '{'(Processes += [ProcessModel])+ '}'
	;
	PushStrategy:
		('desc' description=STRING)?
		'mechanisms' '{'(Mechanisms += Mechanism)+ '}'
	    'processes' '{'(Processes += [ProcessModel])+ '}'
	;
	Mechanism:
		name=ID'='value=Parameter
		'{'
		('desc' description=STRING)?
		('attributes' '{' (attributes+=MechanismAttribute)+ '}')?
		'}'
	;	
	MechanismAttribute:
		attribute=STRING'='value=Parameter
	;
    // ------------------------ WorkItem Objects ---------------------------------
    WorkSource:
    	'WorkSource' name=ID '{'
    	('desc' description=STRING)?
    	('AssignTo' '{' (assignTo+=[ServiceProvider])+ '}')?
//    	(assignmentRule=WIAssignment)?
    	'}'
    ;
	WorkItemNetwork:
    	'WorkItemNetwork' name=ID '{'
    	('desc' description=STRING)?
    	'WorkItems' '{' (workItems+=WorkItem)+ '}'
    	'}'
    	(id=INT)?
    ;

	WorkItem:		
		name=ID ("type:" type=[WorkItemType])?'{'
		('desc' description=STRING)?	
		(hasPredecessors?='prerequisites''{'(pTasks+=[WorkItem])(','pTasks+=[WorkItem])*'}')?	
		((hasSubtasks?='decomposites''{'(sTasks+=[WorkItem])(','sTasks+=[WorkItem])* '}'
		'analysisEfforts''{'(requiredAnalysis+=RequiredService)(','requiredAnalysis+=RequiredService)*'}')?
		|
		(('analysisEfforts''{'(requiredAnalysis+=RequiredService)(','requiredAnalysis+=RequiredService)*'}')?
		'efforts' '{'(requiredServices+=RequiredService)(','requiredServices+=RequiredService)*'}'))
		('MaturityLevels' maturityLevels=AbstractParameter)?
		('Uncertainty' uncertainty=AbstractParameter)?
		('Risk' risk=AbstractParameter)?
		(hasImpacts?='Impacts' '{'(impacts+=Impact)(','impacts+=Impact)*'}')?
		('Value' value=NumExpression)?
		('ClassOfService' classOfService=[ClassOfService])?
		('WorkSource' workSource=[WorkSource])?
		('ArrivalTime' arrivalTime=INT)?
		('DueDate' dueDate=INT)?
		'}'
		(id=INT)?
	;
	RequiredService:
		"["serviceType=[Service]"," efforts=NumExpression"]"
	;

	Impact:
		impactWI=[WorkItem]'['likelihood=NumExpression','risk=NumExpression']'
	;
	WorkItemType:
		(id=INT)?
		name=ID '{'
		('desc' description=STRING)?
		('hierarchy''='hierarchy=INT)?
		'}'
	;	
	ValueFunction:
		'ValueFunction' name=ID '{'
		('desc' description=STRING)?
		'}'
	;	
	ClassOfService:
		(id=INT)?
		name=ID '{'
		('desc' description=STRING)? 
		('priority''='priority=INT)?
		("disruptive" ":" (disruptive=BOOLEAN))?
		'}'
	;	
	// ------------------------ Organizational Objects ---------------------------------
	Service:
		name=ID ('{'
		('desc' description=STRING)?
		('hierarchy' '='hierarchy=INT)?
		'}')?	
		(id=INT)?	
	;		
	ServiceProvider:
		name=ID ('type:' type=[ServiceProviderType])? '{'
		('assignTo' '{' (assignTo+=[ServiceProvider])+ '}')?
		('outsourceFrom' '{' (outsourceFrom+=[ServiceProvider])+ '}')?			
		('strategy' governanceStrategy=[GovernanceStrategy])?
	    ('resources'':' resources+=Asset+)?
	    '}'
	    (id=INT)?
	;
	ServiceProviderType:
		(id=INT)?
		name=ID '{'
		('desc' description=STRING)?
		('hierarchy''='hierarchy=INT)?
		'}'
	;	
	Asset: 
		name=ID '*'number=AbstractParameter '{'
		('skills'':'  (skillSet+=Skill)(','skillSet+=Skill)*)?
		'}'
		(id=INT)?
	;	
	Skill:
		'['service=[Service]','efficiency=NumExpression']' 
	;		
	// ------------------------ Process Model -----------------------------------------------
//	Model:
//		'AgentAttributes'
//		agentAttributes = ClassAttributes
//		'TaskAttributes'
//		taskAttributes = ClassAttributes
//		'BidAttributes'
//		bidAttributes = ClassAttributes
//		'ContractAttributes'
//		contractAttributes = ClassAttributes
//		organizationalModel = OrganizationalModel
//		tasksModel = TasksModel
//		(contractNetProtocols+=ContractNetProtocol)*	
//		(processModels+=ProcessModel)*
//	;
	Type:
		Class|DataType
	;
	DataType:
		'String'|'boolean'|'int'|'double'
	;
	Class:
		'Agent'|'Task'|'Contract'|'Bid'|'Service'
	;
	AbstractType:
		(type=Type)
		|(listType?='List''<'type=Type'>')
		|(mapType?='Map''<'keyType=Type','valueType=Type'>')
	;
	ClassAttributes:
		'{'(agentAttributes += Attribute)+'}';
	Agent:
		'Agent' name=ID '{'
		(attributeValues += AttributeValue)*
		'}';
	Task:
	   	'Task' name=ID '{'
	     (attributeValues += AttributeValue)*
	   	'}';
	
	
	Attribute:
		type=AbstractType name=ID ('default'default=Parameter)?
	;
	AttributeValue:
		attribute=[Attribute]'='value=Parameter
	;	
	Variable:
		type=AbstractType name=ID
	;
	Action:
		'action'name=ID
		'('(inputs+=Variable)?(','inputs+=Variable)*')'
	;
	State:
		(backgroundState?="backgroundState" name = ID)|
		("state" name = ID "{"
		(statements+=Statement)*
		"}")
	;
	IfExpression:
		'('condition=Condition')'
		'{'(statements+=Statement)*'}'
		('else'
			((hasElseIf?='if'elseIf=IfExpression)
			|('{'(elses+=Statement)*'}'))
		)?
	;
	ForExpression:
		'('object=VarExpression'in'set=VarExpression')'
		'{'(statements+=Statement)*'}'
	;
	WhileExpression:
		'('condition=Condition')'
		'{'(statements+=Statement)*'}'
	;
	Condition:
		((subjective=VarExpression operator=Operator objective= Expression)
		|'('(subjective=VarExpression operator=Operator objective= Expression)')')
		((hasAnd?='and''('andCondition=Condition')')|(hasOr?='or' '('orCondition=Condition')'))?
	;
	Statement:
		(isAction?='Do'actionStatement=ActionStatement)
		|(isChangeState?="->"changeStateStatement=ChangeStateStatement)
		|(isDeclaration?="var"declarationStatement=DeclarationStatement)
		|(isIfExpression?="if"ifExpression=IfExpression"end if")
		|(isForExpression?="for"forExpression=ForExpression"end for")
		|(isWhileExpression?="while"whileExpression=WhileExpression"end while")
		|(assertStatement=AssertStatement)
	;
	DeclarationStatement:
		Variable {DeclarationStatement.variable=current} ('='value=Expression)?
	;
	ActionStatement:
		action = [Action] '('((inputs+=VarExpression)+)?')'
	;
	AssertStatement:
		input=VarExpression'='value=Expression
	;	
	ChangeStateStatement:
		"state" targetState = [State]
	;
	// ----------------------------------------------------------------------	
	Expression:
    Term (({Plus.left=current}'+'|{Minus.left=current}'-') right=Term)*
    ;
	Term:
    Factor (({Multiply.left=current} '*'| {Division.left=current}'/') right=Factor)*
    ;
	Factor:
    number=Number|variable=VarExpression|string=STRING |boolean=BOOLEAN|('(' expression=Expression ')')
    ;
    // ----------------------------------------------------------------------
	VarExpression:
		((self?='self')|(context?='context')|(variable=QualifiedName))('.'methods+=Method)*
	;
	Method:
		name=ID functionMethod?='('((inputs+=Parameter)?(','inputs+=Parameter)*)')'
	;	
	// ------------------------ WorkItem Repositories ---------------------------------------
//	Repository:
//		'Repository' type = [WorkItemType]
//		'Profiles' '{'(profiles += WorkItemProfile)* '}'
//		'end Repository'
//	;
//	WorkItemProfile:
//		'WorkItem' name=ID '{'
//		('desc' description=STRING)?
//		('ProcessModel' processModel=[ProcessModel])?
//		('References''{' (references+=WorkReference)+ '}')?
//		('Decompositions' '{' (decompositions+=WorkDecomposition)+ '}')?
//		('RequiredServices' (requiredServices+=[Service])+)?
//		('Efforts' efforts=NumExpression)?
//		('Value' value=NumExpression)?
//		('ClassOfService' classOfService=[ClassOfService])?
//		(allowAssignment ?= 'AssignmentAllowed')?
//		(allowDiscard ?= 'DiscardAllowed')?
//		'}'
//	;
//	WorkReference:
//		'WorkItem' workItem = [WorkItemProfile]
//		'Quantity' quantity = NumExpression
//	;
//	WorkDecomposition:
//		'WorkItem' workItem = [WorkItemProfile]
//		'Quantity' quantity = NumExpression
//	;
//	WorkPrecedency:
//		'WorkItem' workItem = [WorkItemProfile]
//	;
//	WorkCausality:
//		'WorkItem' workItem = [WorkItemProfile]
//	;	
	// ------------------------ (Reserved Objects) ---------------------------------
//	KanbanTaskModel:
//		'WorkFlow' name=ID
//		(caps+=Capability)+
//		'end WorkFlow'
//	;
//	
//	Entity:
//		'entity' name=ID '{'
//		('ServiceDirectory' sdname=ID '=' '['(serviceProvisions+=Provision)* ']')?
//		(entityBehavior=Statemachine)
//		'}'
//	;
//	
//	Provision:
//		'(' serviceName=[Service] ',' '{'(providers+=[ServiceProvider])* '}'')' 
//	;
//	
//	
//	Statemachine :
//     {Statemachine}
//	('events' 
//		events+=Event+ 
//	'end')?
//	('activities' 
//		commands+=Command+ 
//	'end')?
//	(states+=State)*
//;
//
//	Event:
//		name=ID code=ID
//	;
//	
//	Command:
//		name=ID code=ID
//	;
//	
//	State:
//		'state' name=ID
//			('actions' '{' actions+=[Command]+ '}')?
//			(transitions+=Transition)*
//		'end'
//	;
//
//	Transition:
//		(event=[Event] '=>' state=[State]) | (event=[Event] '/' '[' (eventactions+=[Command])+ ']' '=>' state=[State])
//	;
	
